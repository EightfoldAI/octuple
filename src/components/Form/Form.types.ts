import type {
  OcFieldProps,
  OcFormInstance,
  OcFormProps,
  OcMeta,
  OcStoreValue,
  OcValidatorRule,
} from './Internal/OcForm.types';
import type { ReportMetaChange } from './Context';
import { FormInstance } from './Hooks/useForm';
import { Size } from '../ConfigProvider/SizeContext';
import { Shape } from '../ConfigProvider/ShapeContext';
import type { ColProps } from '../Grid/Grid.types';
import type { TooltipProps } from '../Tooltip';
import { tuple } from '../../shared/utilities';
import type { Options } from 'scroll-into-view-if-needed';

export {
  InternalOcNamePath,
  OcNamePath,
  OcStore,
  OcStoreValue,
} from './Internal/OcForm.types';

export { Options as ScrollOptions } from 'scroll-into-view-if-needed';

export type FormLabelAlign = 'left' | 'right';

export type RequiredMark = boolean | 'optional';

export type FormLayout = 'horizontal' | 'inline' | 'vertical';

export interface FormProps<Values = any>
  extends Omit<OcFormProps<Values>, 'form'> {
  /**
   * Custom classnames of the Form
   */
  classNames?: string;
  /**
   * Configure the default value of colon for Form.Item
   * Colon after the label is displayed if true (prop layout must be horizontal)
   * @default true
   */
  colon?: boolean;
  /**
   * Disables Form Octuple components
   * @default false
   */
  disabled?: boolean;
  /**
   * Form control instance created by form.useForm()
   * Automatically created when not provided
   */
  form?: FormInstance<Values>;
  /**
   * The text align of label of all items
   * @default 'left'
   */
  labelAlign?: FormLabelAlign;
  /**
   * The Column layout for field labels
   */
  labelCol?: ColProps;
  /**
   * Determines if Form labels can wrap
   * @default false
   */
  labelWrap?: boolean;
  /**
   * The Form layout [horizontal | vertical | inline]
   * @default 'horizontal'
   */
  layout?: FormLayout;
  /**
   * The Form name
   */
  name?: string;
  /**
   * Required mark enabled and/or style
   * @default true
   */
  requiredMark?: RequiredMark;
  /**
   * Auto scroll to the first failed field when Form submit action is attempted
   * @default false
   */
  scrollToFirstError?: Options | boolean;
  /**
   * Set field Octuple components shape
   */
  shape?: Shape;
  /**
   * Set field Octuple components size
   */
  size?: Size;
  /**
   * The Column layout for field input controls
   */
  wrapperCol?: ColProps;
}

export interface FormItemInputMiscProps {
  children: React.ReactNode;
  errors: React.ReactNode[];
  marginBottom?: number | null;
  onErrorVisibleChanged?: (visible: boolean) => void;
  warnings: React.ReactNode[];
}

export interface FormItemInputProps {
  /**
   * The extra prompt message, similar to help
   * Usage example: to display error message and prompt message at the same time
   */
  extra?: React.ReactNode;
  /**
   * The prompt message
   * If not provided, the prompt message will be generated by the validation rule
   */
  help?: React.ReactNode;
  /**
   * The input validation status
   */
  status?: ValidateStatus;
  /**
   * The layout for input controls, same as labelCol
   * You can set wrapperCol on Form which will not affect nest Item
   * If both exist, use Item first
   */
  wrapperCol?: ColProps;
}

export type WrapperTooltipProps = TooltipProps & {
  icon?: React.ReactElement;
};

export type LabelTooltipType = WrapperTooltipProps | React.ReactNode;

export interface FormItemLabelProps {
  /**
   * Used with label, whether to display : after label text
   * @default true
   */
  colon?: boolean;
  /**
   * Set sub label `htmlFor`
   */
  htmlFor?: string;
  /**
   * The parent element ref.
   */
  itemRef?: React.MutableRefObject<HTMLDivElement>;
  /**
   * Label text
   */
  label?: React.ReactNode;
  /**
   * The text align of label
   */
  labelAlign?: FormLabelAlign;
  /**
   * The layout of label
   * You can set span offset to something like {span: 3, offset: 7}
   * or sm: {span: 3, offset: 7} same as with <Col>
   * You can set labelCol on Form which will not affect nest Item
   * If both exist, use Item first
   */
  labelCol?: ColProps;
  /**
   * Required mark style
   * May use required mark or optional mark
   * You may not configure to single Form.Item since this is a Form level config
   */
  requiredMark?: RequiredMark;
  /**
   * Configure tooltip content
   */
  tooltip?: LabelTooltipType;
}

export interface FormListFieldData {
  name: number;
  key: number;
}

export interface FormListOperation {
  /**
   * Add a Form.Item
   */
  add: (defaultValue?: OcStoreValue, insertIndex?: number) => void;
  /**
   * Move a Form.Item
   */
  move: (from: number, to: number) => void;
  /**
   * Remove a Form.Item
   */
  remove: (index: number | number[]) => void;
}

export interface FormListProps {
  /**
   * The render function
   */
  children: (
    fields: FormListFieldData[],
    operation: FormListOperation,
    meta: { errors: React.ReactNode[]; warnings: React.ReactNode[] }
  ) => React.ReactNode;
  /**
   * Configure sub default value
   * Form initialValues get higher priority
   */
  initialValue?: any[];
  /**
   * Field name, supports array
   */
  name: string | number | (string | number)[];
  /**
   * Validate rules
   * only supports customized validator
   */
  rules?: OcValidatorRule[];
}

export interface FieldError {
  errors: string[];
  warnings: string[];
}

const ValidateStatuses = tuple(
  'success',
  'warning',
  'error',
  'validating',
  'highlight',
  ''
);
export type ValidateStatus = typeof ValidateStatuses[number];

export type RenderChildren<Values = any> = (
  form: OcFormInstance<Values>
) => React.ReactNode;
type FieldProps<Values = any> = Omit<OcFieldProps<Values>, 'children'>;
type ChildrenType<Values = any> = RenderChildren<Values> | React.ReactNode;

export interface MemoInputProps {
  value: any;
  update: any;
  children: React.ReactNode;
}

export interface FormItemProps<Values = any>
  extends FormItemLabelProps,
    FormItemInputProps,
    FieldProps<Values> {
  /**
   * The Form.Item children
   */
  children?: ChildrenType<Values>;
  /**
   * Custom classnames of the Form.Item
   */
  classNames?: string;
  /**
   * Used with validateStatus
   * this option specifies the validation status icon
   * Recommended to be used only with TextInput
   */
  hasFeedback?: boolean;
  /**
   * hide Form.Item
   * @default false
   */
  hidden?: boolean;
  /**
   * The Form.Item id
   */
  id?: string;
  /**
   * Form.Item default value.
   * Form initialValues prop gets a higher priority
   */
  initialValue?: any;
  /**
   * The default validate field info
   */
  messageVariables?: Record<string, string>;
  /**
   * Form.Item field should ignore Form validation styles
   * @default false
   */
  noStyle?: boolean;
  /**
   * Display required style
   * Will be generated by the validation rule
   * @default false
   */
  required?: boolean;
  /**
   * The Form.Item style
   */
  style?: React.CSSProperties;
  /**
   * Configure Tooltip content
   */
  tooltip?: LabelTooltipType;
  /**
   * The validation status
   * If not provided, will be generated by the validation rule
   * options: success, warning, error, and validating
   */
  validateStatus?: ValidateStatus;
}

export interface ItemHolderProps extends FormItemProps {
  classNames?: string;
  style?: React.CSSProperties;
  errors: React.ReactNode[];
  warnings: React.ReactNode[];
  meta: OcMeta;
  children?: React.ReactNode;
  fieldId?: string;
  isRequired?: boolean;
  onSubItemMetaChange: ReportMetaChange;
}
